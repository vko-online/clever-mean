"use strict";var ApplicationConfiguration=function(){var applicationModuleName="recode-kz",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","btford.socket-io","alAngularHero","angularFileUpload","ngTagsInput","ngToast"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(!0)}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("posts"),ApplicationConfiguration.registerModule("subscriptions"),ApplicationConfiguration.registerModule("tags"),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("viewArticlePermalink",{url:"/a/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","$http","Authentication","Articles","Tags","ngToast",function($scope,$stateParams,$location,$http,Authentication,Articles,Tags,ngToast){$scope.authentication=Authentication,$scope.editor=!1,$scope.loadTags=function(query){return Tags.query({text:query}).$promise},$scope.addTag=function(tag){$scope.article.$addTag({tagId:tag._id})},$scope.removeTag=function(tag){$scope.article.$removeTag({tagId:tag._id})},$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId},function(){$scope.editor=new MediumEditor(".lead",{toolbar:{allowMultiParagraphSelection:!0,buttons:["bold","italic","underline","anchor","h2","h3","quote"],diffLeft:0,diffTop:-10,firstButtonClass:"medium-editor-button-first",lastButtonClass:"medium-editor-button-last",standardizeSelectionStart:!1,"static":!1,relativeContainer:null,align:"center",sticky:!1,updateOnEmptySelection:!1}}),$scope.editor.subscribe("editableInput",function(event,editable){$scope.article.content=event.target.innerHTML});var port=$location.port();$scope.host=$location.protocol()+"://"+$location.host()+":"+("80"===port?"":port);var client=new ZeroClipboard(document.getElementById("permalink-copier"));client.on("ready",function(readyEvent){client.on("aftercopy",function(event){event.target.style.display="none",$scope.$apply(function(){ngToast.create("Copied to clipboard")})})})})},$scope.$on("destroy",function(){$scope.editor.unsubscribe("editableInput")})}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("api/articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"},addTag:{url:"api/articles/:articleId/tag",method:"POST",isArray:!1},removeTag:{url:"api/articles/:articleId/tag",method:"DELETE",isArray:!1}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("Socket",["socketFactory",function(socketFactory){return socketFactory({prefix:"",ioSocket:io.connect("http://localhost:3000")})}]),angular.module("posts").run(["Menus",function(Menus){}]),angular.module("posts").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPosts",{url:"/posts",templateUrl:"modules/posts/views/list-posts.client.view.html"}).state("createPost",{url:"/posts/create",templateUrl:"modules/posts/views/create-post.client.view.html"}).state("viewPost",{url:"/posts/:postId",templateUrl:"modules/posts/views/view-post.client.view.html"}).state("editPost",{url:"/posts/:postId/edit",templateUrl:"modules/posts/views/edit-post.client.view.html"})}]),angular.module("posts").controller("PostsController",["$scope","$stateParams","$location","Authentication","Posts",function($scope,$stateParams,$location,Authentication,Posts){$scope.authentication=Authentication,$scope.create=function(){var post=new Posts({name:this.name});post.$save(function(response){$location.path("posts/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(post){if(post){post.$remove();for(var i in $scope.posts)$scope.posts[i]===post&&$scope.posts.splice(i,1)}else $scope.post.$remove(function(){$location.path("posts")})},$scope.update=function(){var post=$scope.post;post.$update(function(){$location.path("posts/"+post._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.posts=Posts.query()},$scope.findOne=function(){$scope.post=Posts.get({postId:$stateParams.postId})}}]),angular.module("posts").factory("Posts",["$resource",function($resource){return $resource("api/posts/:postId",{postId:"@_id"},{update:{method:"PUT"}})}]),angular.module("subscriptions").run(["Menus",function(Menus){}]),angular.module("subscriptions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSubscriptions",{url:"/subscriptions",templateUrl:"modules/subscriptions/views/list-subscriptions.client.view.html"}).state("createSubscription",{url:"/subscriptions/create",templateUrl:"modules/subscriptions/views/create-subscription.client.view.html"}).state("viewSubscription",{url:"/subscriptions/:subscriptionId",templateUrl:"modules/subscriptions/views/view-subscription.client.view.html"}).state("editSubscription",{url:"/subscriptions/:subscriptionId/edit",templateUrl:"modules/subscriptions/views/edit-subscription.client.view.html"})}]),angular.module("subscriptions").controller("SubscriptionsController",["$scope","$stateParams","$location","Authentication","Subscriptions",function($scope,$stateParams,$location,Authentication,Subscriptions){$scope.authentication=Authentication,$scope.create=function(){var subscription=new Subscriptions({name:this.name});subscription.$save(function(response){$location.path("subscriptions/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(subscription){if(subscription){subscription.$remove();for(var i in $scope.subscriptions)$scope.subscriptions[i]===subscription&&$scope.subscriptions.splice(i,1)}else $scope.subscription.$remove(function(){$location.path("subscriptions")})},$scope.update=function(){var subscription=$scope.subscription;subscription.$update(function(){$location.path("subscriptions/"+subscription._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.subscriptions=Subscriptions.query()},$scope.findOne=function(){$scope.subscription=Subscriptions.get({subscriptionId:$stateParams.subscriptionId})}}]),angular.module("subscriptions").factory("Subscriptions",["$resource",function($resource){return $resource("api/subscriptions/:subscriptionId",{subscriptionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("tags").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Tags","tags","dropdown","/tags(/create)?"),Menus.addSubMenuItem("topbar","tags","List Tags","tags")}]),angular.module("tags").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTags",{url:"/tags",templateUrl:"modules/tags/views/list-tags.client.view.html"}).state("viewTag",{url:"/tags/:tagId",templateUrl:"modules/tags/views/view-tag.client.view.html"})}]),angular.module("tags").controller("TagsController",["$scope","$stateParams","$location","Authentication","Tags",function($scope,$stateParams,$location,Authentication,Tags){$scope.authentication=Authentication,$scope.query={text:"",search:function(){$scope.tags=Tags.query({text:$scope.query.text})}},$scope.find=function(){$scope.tags=Tags.query()},$scope.findOne=function(){$scope.tag=Tags.get({tagId:$stateParams.tagId})}}]),angular.module("tags").factory("Tags",["$resource",function($resource){return $resource("api/tags/:tagId",{tagId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]);